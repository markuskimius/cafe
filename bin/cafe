#!/bin/bash

##############################################################################
# CAFE: Organize your Unix packages
# https://github.com/markuskimius/cafe
#
# Copyright (c)2020 Mark K. Kim
# Released under the Apache license 2.0
# https://github.com/markuskimius/cafe/blob/master/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Cafe package manager.

Usage: ${SCRIPTNAME} [OPTIONS] COMMAND [ARGUMENTS]

COMMAND:
  install-git URL [PKGNAME]
                        Install PKGNAME by git-cloning from URL.

  install-deps [PKGNAME]
                        Install packages required by PKGNAME.  If PKGNAME is
                        omitted, packages required by all packages are
                        installed.

  update [PKGNAME]      Update packages required by PKGNAME.  If PKGNAME is
                        omitted, packages required by all packages are
                        updated.

OPTIONS:
  -d,--dry-run          Dry run.  Do not actually install.

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

SCRIPTNAME=$(basename "$BASH_SOURCE")
DRYRUN=0
SKIP=:work:


function main() {
    local optstring
    local isok=1

    # Check dependencies
    has-deps || exit 1

    # Process options
    optstring=$(getopt -o "hd" --long "help,dry-run" -- "$@") || isok=0
    eval set -- "$optstring"

    while (( $# )); do
        [[ "$1" == "--" ]] && shift && break

        case "$1" in
            -h|--help)     usage && exit 0  ;;
            -d|--dry-run)  DRYRUN=1         ;;
        esac

        shift
    done

    # Sanity check
    (( $# == 0 )) && echo "Invalid argument count!" 1>&2 && isok=0

    if (( ! isok )); then
        echo "Type '${SCRIPTNAME} -h' for help." 1>&2
        exit 1
    fi

    # Execute the command
    case "$1" in
        help)           usage && exit 0                        ;;
        install-git)    shift && pkg-action install git "$@"   ;;
        install-deps)   shift && deps-action install auto "$@" ;;
        update)         shift && pkg-action update auto "$@"   ;;
        *)              echo "${1}: Invalid command" 1>&2
                        exit 1                                 ;;
    esac
}


function has-deps() {
    local isok=1

    if [[ -z "$CAFE" ]]; then
        echo "Please source etc/bashrc" 1>&2
        isok=0
    fi

    if readlink -f . &>/dev/null; (( $? != 0 )); then
        echo "Please install GNU readlink.  It comes with the coreutils package." 1>&2
        isok=0
    fi

    if getopt -T &>/dev/null; (( $? != 4 )); then
        echo "Please install enhanced getopt.  It comes with the util-linux package (Linux) or getopt package (MacPorts)." 1>&2
        isok=0
    fi

    if ! command -v jq &>/dev/null; then
        echo "Please install 'jq'.  It's a common Unix utility for parsing JSON files." 1>&2
        isok=0
    fi

    if ! command -v git &>/dev/null; then
        echo "Please install 'git'" 1>&2
        isok=0
    fi

    (( isok ))
}


function pkg-action() {
    local action=$1 && shift
    local method=$1 && shift
    local name

    # name = last argument
    for name in "$@"; do
        :
    done

    # No package specified -- action on all installed packages
    if (( $# == 0 )); then
        local pkg

        for pkg in "${CAFE}"/*; do
            pkg=$(basename "$pkg")

            pkg-action "$action" "$method" "$pkg"
        done

        return
    fi

    # Don't repeat the same action
    [[ "$SKIP" == *":${name}:"* ]] && return
    SKIP+="${name}:"

    # Autodetect method if needed
    if [[ "$method" == "auto" ]] && [[ -d "${CAFE}/${name}/.git" ]]; then
        method=git
    elif [[ "$method" == "auto" ]]; then
        method=unknown
    fi

    # Action
    case "${method}" in
        git)  git-action "$action" "$@" ;;
        *)    echo "Method unknown -- ${method} $@" 1>&2
              return 3                  ;;
    esac
}


function git-action() {
    local action=$1
    local url=$2
    local name=${3-$(basename "$url" .git)}
    local command

    # Install instead of update if the target directory
    if [[ "$action" == "update" ]] && ! [[ -d "${CAFE}/${name}" ]]; then
        action=install
    fi

    case "$action" in
        install) command=( git -C "${CAFE}" clone "$url" "${name}" ) ;;
        update)  command=( git -C "${CAFE}/${name}" pull )           ;;
        *)       echo "git-action: We shouldn't get here" 1>&2
                 exit 1                                              ;;
    esac

    echo "${command[@]}"

    if ! (( DRYRUN )); then
        "${command[@]}" && deps-action "$action" auto "$name"
    fi
}


function deps-action() {
    local action=$1
    local method=$2
    local name=$3

    if [[ -n "$name" ]]; then
        pkgdeps-action "$@"
    else
        alldeps-action "$@"
    fi
}


function pkgdeps-action() {
    local action=$1
    local method=$2
    local name=$3
    local json=${CAFE}/${name}/etc/cafe-deps.json

    if [[ -e "$json" ]]; then
        json-action "$action" "$json"
    fi
}


function alldeps-action() {
    local action=$1
    local method=$2
    local name=$3
    local json

    for json in "${CAFE}"/*/etc/cafe-deps.json; do
        if [[ -e "${json}" ]]; then
            echo "Found config ${json} ..."
            json-action "$action" "$json"
        fi
    done
}


function json-action() {
    local action=$1
    local json=$2
    local name

    while IFS= read -r name; do
        if [[ "$action" == "install" && -e "${CAFE}/${name}" ]]; then
            echo "Already installed -- ${name}"
            continue
        fi

        jsonpkg-action "$action" "$json" "$name"
    done < <(jq -r '.[].name' "$json")
}


function jsonpkg-action() {
    local action=$1
    local json=$2
    local name=$3
    local params=()
    local expected=3

    # Get package details
    while IFS= read -r line; do
        params+=( "$line" )
    done < <(jq -r --arg name "$name" '.[] | select(.name == $name) | .method, .url, .name' "$json")

    (( ${#params[@]} < expected )) && echo "Invalid package -- $name" 1>&2 && return 1
    (( ${#params[@]} > expected )) && echo "Too many packages with same name ($(( ${#params[@]} / expected ))) -- $name" 1>&2 && return 2

    pkg-action "$action" "${params[@]}"
}


##############################################################################
# ENTRY POINT

main "$@"
