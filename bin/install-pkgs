#!/bin/bash

##############################################################################
# COFFEE: Buzz up your UNIX login
# https://github.com/markuskimius/coffee
#
# Copyright (c)2020 Mark K. Kim
# Released under the Apache license 2.0
# https://github.com/markuskimius/coffee/blob/master/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Install the packages specified in \$COFFEE/*/etc/coffee-pkgs.json.

Usage: ${SCRIPTNAME} [-d]

  -d,--dry-run          Do not actually perform installation.

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

include "getopt.sh"

SCRIPTNAME=$(basename "${BASH_SOURCE}")
DRYRUN=0


function main() {
    local OPTOPT OPTARG OPTERR OPTARRAY
    local errcount=0

    # Process options
    while coffee::getopt "hd" "help,dry-run" "$@"; do
        case "$OPTOPT" in
            -h|--help)     usage && exit 0          ;;
            -d|--dry-run)  DRYRUN=1                 ;;
            *)             errcount=$((errcount+1)) ;;
        esac
    done

    # Sanity check
    if (( errcount )); then
        echo "Type '${SCRIPTNAME} -h' for help." 1>&2
        exit 1
    fi

    install-packages "${OPTARRAY[@]}"
}


function install-packages() {
    local json

    for json in "${COFFEE}"/*/etc/coffee-pkgs.json; do
        if [[ -e "${json}" ]]; then
            echo "Found config ${json} ..."
            install-json "${json}"
        fi
    done
}


function install-json() {
    local json=$1
    local name

    while IFS= read -r name; do
        if [[ -e "${COFFEE}/${name}" ]]; then
            echo "Already installed -- ${name}"
            continue
        fi

        install-pkg "${json}" "${name}"
    done < <(jq -r '.[].name' "$json")
}


function install-pkg() {
    local json=$1
    local name=$2
    local params=()
    local expected=3

    # Get package details
    while IFS= read -r line; do
        params+=( "$line" )
    done < <(jq -r --arg name "$name" '.[] | select(.name == $name) | .method, .name, .url' "$json")

    (( ${#params[@]} < expected )) && echo "Invalid package -- $name" 1>&2 && return 1
    (( ${#params[@]} > expected )) && echo "Too many packages with same name ($(( ${#params[@]} / expected ))) -- $name" 1>&2 && return 2

    case "${params[0]}" in
        git) install-git_pkg "${params[@]:1}" ;;
        *)   echo "Unsupported package installation method -- ${params[0]}" 1>&2 && return 3 ;;
    esac
}


function install-git_pkg() {
    local name=$1
    local url=$2

    if (( DRYRUN )); then
        echo git clone "$url" "${COFFEE}/${name}"
    else
        git clone "$url" "${COFFEE}/${name}"
    fi
}


##############################################################################
# ENTRY POINT

main "$@"
